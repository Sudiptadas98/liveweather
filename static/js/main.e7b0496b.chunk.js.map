{"version":3,"sources":["Loading .jsx","Weatherapp.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Loading","className","Weatherapp","useState","loading","setLoading","city","setcity","cntry","setCntry","weather","setWeather","search","setSearch","useEffect","a","url","fetch","resp","json","resJson","arrData","console","log","main","sys","country","fetchApi","id","type","onChange","event","target","value","temp","temp_min","temp_max","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAUeA,MATf,WACI,OACI,mCACI,qBAAKC,UAAU,UAAf,SACI,iDC8FDC,MA/Ff,WAAuB,IAAD,EAEYC,oBAAS,GAFrB,mBAEXC,EAFW,KAEFC,EAFE,OAgBMF,mBAAS,MAhBf,mBAgBXG,EAhBW,KAgBLC,EAhBK,OAiBQJ,qBAjBR,mBAiBXK,EAjBW,KAiBJC,EAjBI,OAkBYN,qBAlBZ,mBAkBXO,EAlBW,KAkBFC,EAlBE,OAmBUR,mBAAS,WAnBnB,mBAmBXS,EAnBW,KAmBHC,EAnBG,KAmDlB,OA9BAC,qBAAU,YACQ,uCAAG,kCAAAC,EAAA,sEAEHC,EAFG,2DAEuDJ,EAFvD,wDAGTP,GAAW,GAHF,SAIUY,MAAMD,GAJhB,cAIHE,EAJG,gBAKaA,EAAKC,OALlB,OAKHC,EALG,OAMHC,EAAU,CAACD,GAEjBE,QAAQC,IAAIF,GAMZd,EAAQc,EAAQ,GAAGG,MACnBf,EAASY,EAAQ,GAAGI,IAAIC,SACxBf,EAAWU,EAAQ,GAAGX,QAAQ,GAAGc,MAhBxB,4GAAH,qDAyBdG,KACD,CAACf,IAGDR,EACQ,cAAC,EAAD,IAGP,mCACI,qBAAKwB,GAAG,aAAR,SACI,sBAAK3B,UAAU,MAAf,UACI,qBAAKA,UAAU,cACf,qBAAKA,UAAU,cACf,qBAAKA,UAAU,gBAEf,qBAAKA,UAAU,YAAf,SACI,uBAAO4B,KAAK,SACZC,SAAU,SAACC,GAAWlB,EAAUkB,EAAMC,OAAOC,YAG/C3B,EAIM,sBAAKL,UAAU,OAAf,UACI,sBAAKA,UAAU,WAAf,UACI,mBAAGA,UAAU,0BACb,+BACKW,EADL,KACeJ,QAInB,qBAAKP,UAAU,UAAf,SACI,6BAAKS,MAET,sBAAKT,UAAU,OAAf,UACI,+BAAKK,EAAK4B,KAAV,WACA,sCAAS5B,EAAK6B,SAAd,gBAAkC7B,EAAK8B,SAAvC,iBAhBZ,mBAAGnC,UAAU,SAAb,mCC7DToC,MARf,WACI,OACI,mCACI,cAAC,EAAD,OCMGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e7b0496b.chunk.js","sourcesContent":["import React from \"react\";\r\nfunction Loading() {\r\n    return (\r\n        <>\r\n            <div className=\"loading\">\r\n                <h1>Loading...</h1>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Loading;","import React, { useEffect, useState } from \"react\";\r\nimport Loading from \"./Loading \";\r\n\r\n\r\nfunction Weatherapp() {\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    // const [widthCount, setWidthCount] = useState(window.screen.width);\r\n\r\n    // const actuallWidth = () => {\r\n    //     setWidthCount(window.innerWidth);\r\n    // }\r\n    // useEffect(() => {\r\n    //     window.addEventListener(\"resize\", actuallWidth);\r\n        \r\n    //     return () => {\r\n    //         window.removeEventListener(\"resize\", actuallWidth);\r\n    //     }\r\n    // })\r\n\r\n    const [city, setcity] = useState(null) ;\r\n    const [cntry, setCntry] = useState();\r\n    const [weather, setWeather] = useState();\r\n    const [search, setSearch] = useState(\"Kolkata\");\r\n\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            try{\r\n                const url = `http://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=1f2ebd7a0a6aa3453c26fedcfe124a6b`\r\n                setLoading(false);\r\n                const resp = await fetch(url);\r\n                const resJson = await resp.json();\r\n                const arrData = [resJson];\r\n\r\n                console.log(arrData);\r\n                \r\n                \r\n\r\n\r\n\r\n                setcity(arrData[0].main);\r\n                setCntry(arrData[0].sys.country);\r\n                setWeather(arrData[0].weather[0].main)\r\n\r\n            }catch(error) {\r\n\r\n            }\r\n            \r\n\r\n        }\r\n\r\n        fetchApi();\r\n    }, [search])\r\n\r\n\r\n    if(loading) {\r\n        return <Loading/>\r\n    }\r\n    return (\r\n        <>\r\n            <div id=\"weatherapp\">\r\n                <div className=\"box\">\r\n                    <div className=\"wave -one\"></div>\r\n                    <div className=\"wave -two\"></div>\r\n                    <div className=\"wave -three\"></div>\r\n\r\n                    <div className=\"inputdata\">\r\n                        <input type=\"search\"\r\n                        onChange={(event) => {setSearch(event.target.value)}}/>\r\n                    </div>\r\n\r\n                    {!city ? (\r\n                        <p className=\"errmsg\">No Data Found</p>\r\n                    ): (\r\n\r\n                            <div className=\"info\">\r\n                                <div className=\"location\">\r\n                                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                                    <h1>\r\n                                        {search}, {cntry}\r\n                                    </h1>\r\n                                </div>\r\n                                \r\n                                <div className=\"weather\">\r\n                                    <h2>{weather}</h2>\r\n                                </div>\r\n                                <div className=\"temp\">\r\n                                    <h2>{city.temp}°C</h2>\r\n                                    <p>Min: {city.temp_min}°C | Max: {city.temp_max}°C</p>\r\n                                </div>\r\n                                \r\n                            </div>\r\n                        )}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Weatherapp;\r\n","import React from \"react\";\r\nimport Weatherapp from \"./Weatherapp\";\r\n\r\nfunction App(){\r\n    return(\r\n        <>\r\n            <Weatherapp/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}